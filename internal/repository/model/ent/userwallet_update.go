// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/indrasaputra/spenmo/internal/repository/model/ent/predicate"
	"github.com/indrasaputra/spenmo/internal/repository/model/ent/user"
	"github.com/indrasaputra/spenmo/internal/repository/model/ent/usercard"
	"github.com/indrasaputra/spenmo/internal/repository/model/ent/userwallet"
)

// UserWalletUpdate is the builder for updating UserWallet entities.
type UserWalletUpdate struct {
	config
	hooks    []Hook
	mutation *UserWalletMutation
}

// Where appends a list predicates to the UserWalletUpdate builder.
func (uwu *UserWalletUpdate) Where(ps ...predicate.UserWallet) *UserWalletUpdate {
	uwu.mutation.Where(ps...)
	return uwu
}

// SetUpdatedAt sets the "updated_at" field.
func (uwu *UserWalletUpdate) SetUpdatedAt(t time.Time) *UserWalletUpdate {
	uwu.mutation.SetUpdatedAt(t)
	return uwu
}

// SetDeletedAt sets the "deleted_at" field.
func (uwu *UserWalletUpdate) SetDeletedAt(t time.Time) *UserWalletUpdate {
	uwu.mutation.SetDeletedAt(t)
	return uwu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uwu *UserWalletUpdate) SetNillableDeletedAt(t *time.Time) *UserWalletUpdate {
	if t != nil {
		uwu.SetDeletedAt(*t)
	}
	return uwu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uwu *UserWalletUpdate) ClearDeletedAt() *UserWalletUpdate {
	uwu.mutation.ClearDeletedAt()
	return uwu
}

// SetBalance sets the "balance" field.
func (uwu *UserWalletUpdate) SetBalance(f float64) *UserWalletUpdate {
	uwu.mutation.ResetBalance()
	uwu.mutation.SetBalance(f)
	return uwu
}

// AddBalance adds f to the "balance" field.
func (uwu *UserWalletUpdate) AddBalance(f float64) *UserWalletUpdate {
	uwu.mutation.AddBalance(f)
	return uwu
}

// SetUserID sets the "user_id" field.
func (uwu *UserWalletUpdate) SetUserID(i int64) *UserWalletUpdate {
	uwu.mutation.SetUserID(i)
	return uwu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uwu *UserWalletUpdate) SetNillableUserID(i *int64) *UserWalletUpdate {
	if i != nil {
		uwu.SetUserID(*i)
	}
	return uwu
}

// ClearUserID clears the value of the "user_id" field.
func (uwu *UserWalletUpdate) ClearUserID() *UserWalletUpdate {
	uwu.mutation.ClearUserID()
	return uwu
}

// SetUser sets the "user" edge to the User entity.
func (uwu *UserWalletUpdate) SetUser(u *User) *UserWalletUpdate {
	return uwu.SetUserID(u.ID)
}

// AddUserWalletCardIDs adds the "user_wallet_cards" edge to the UserCard entity by IDs.
func (uwu *UserWalletUpdate) AddUserWalletCardIDs(ids ...int64) *UserWalletUpdate {
	uwu.mutation.AddUserWalletCardIDs(ids...)
	return uwu
}

// AddUserWalletCards adds the "user_wallet_cards" edges to the UserCard entity.
func (uwu *UserWalletUpdate) AddUserWalletCards(u ...*UserCard) *UserWalletUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uwu.AddUserWalletCardIDs(ids...)
}

// Mutation returns the UserWalletMutation object of the builder.
func (uwu *UserWalletUpdate) Mutation() *UserWalletMutation {
	return uwu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uwu *UserWalletUpdate) ClearUser() *UserWalletUpdate {
	uwu.mutation.ClearUser()
	return uwu
}

// ClearUserWalletCards clears all "user_wallet_cards" edges to the UserCard entity.
func (uwu *UserWalletUpdate) ClearUserWalletCards() *UserWalletUpdate {
	uwu.mutation.ClearUserWalletCards()
	return uwu
}

// RemoveUserWalletCardIDs removes the "user_wallet_cards" edge to UserCard entities by IDs.
func (uwu *UserWalletUpdate) RemoveUserWalletCardIDs(ids ...int64) *UserWalletUpdate {
	uwu.mutation.RemoveUserWalletCardIDs(ids...)
	return uwu
}

// RemoveUserWalletCards removes "user_wallet_cards" edges to UserCard entities.
func (uwu *UserWalletUpdate) RemoveUserWalletCards(u ...*UserCard) *UserWalletUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uwu.RemoveUserWalletCardIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uwu *UserWalletUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uwu.defaults()
	if len(uwu.hooks) == 0 {
		affected, err = uwu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uwu.mutation = mutation
			affected, err = uwu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uwu.hooks) - 1; i >= 0; i-- {
			if uwu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uwu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uwu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uwu *UserWalletUpdate) SaveX(ctx context.Context) int {
	affected, err := uwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uwu *UserWalletUpdate) Exec(ctx context.Context) error {
	_, err := uwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwu *UserWalletUpdate) ExecX(ctx context.Context) {
	if err := uwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwu *UserWalletUpdate) defaults() {
	if _, ok := uwu.mutation.UpdatedAt(); !ok {
		v := userwallet.UpdateDefaultUpdatedAt()
		uwu.mutation.SetUpdatedAt(v)
	}
}

func (uwu *UserWalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userwallet.Table,
			Columns: userwallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userwallet.FieldID,
			},
		},
	}
	if ps := uwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uwu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldUpdatedAt,
		})
	}
	if value, ok := uwu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldDeletedAt,
		})
	}
	if uwu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userwallet.FieldDeletedAt,
		})
	}
	if value, ok := uwu.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userwallet.FieldBalance,
		})
	}
	if value, ok := uwu.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userwallet.FieldBalance,
		})
	}
	if uwu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userwallet.UserTable,
			Columns: []string{userwallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uwu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userwallet.UserTable,
			Columns: []string{userwallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uwu.mutation.UserWalletCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userwallet.UserWalletCardsTable,
			Columns: []string{userwallet.UserWalletCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: usercard.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uwu.mutation.RemovedUserWalletCardsIDs(); len(nodes) > 0 && !uwu.mutation.UserWalletCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userwallet.UserWalletCardsTable,
			Columns: []string{userwallet.UserWalletCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: usercard.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uwu.mutation.UserWalletCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userwallet.UserWalletCardsTable,
			Columns: []string{userwallet.UserWalletCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: usercard.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userwallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserWalletUpdateOne is the builder for updating a single UserWallet entity.
type UserWalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserWalletMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uwuo *UserWalletUpdateOne) SetUpdatedAt(t time.Time) *UserWalletUpdateOne {
	uwuo.mutation.SetUpdatedAt(t)
	return uwuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uwuo *UserWalletUpdateOne) SetDeletedAt(t time.Time) *UserWalletUpdateOne {
	uwuo.mutation.SetDeletedAt(t)
	return uwuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uwuo *UserWalletUpdateOne) SetNillableDeletedAt(t *time.Time) *UserWalletUpdateOne {
	if t != nil {
		uwuo.SetDeletedAt(*t)
	}
	return uwuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uwuo *UserWalletUpdateOne) ClearDeletedAt() *UserWalletUpdateOne {
	uwuo.mutation.ClearDeletedAt()
	return uwuo
}

// SetBalance sets the "balance" field.
func (uwuo *UserWalletUpdateOne) SetBalance(f float64) *UserWalletUpdateOne {
	uwuo.mutation.ResetBalance()
	uwuo.mutation.SetBalance(f)
	return uwuo
}

// AddBalance adds f to the "balance" field.
func (uwuo *UserWalletUpdateOne) AddBalance(f float64) *UserWalletUpdateOne {
	uwuo.mutation.AddBalance(f)
	return uwuo
}

// SetUserID sets the "user_id" field.
func (uwuo *UserWalletUpdateOne) SetUserID(i int64) *UserWalletUpdateOne {
	uwuo.mutation.SetUserID(i)
	return uwuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uwuo *UserWalletUpdateOne) SetNillableUserID(i *int64) *UserWalletUpdateOne {
	if i != nil {
		uwuo.SetUserID(*i)
	}
	return uwuo
}

// ClearUserID clears the value of the "user_id" field.
func (uwuo *UserWalletUpdateOne) ClearUserID() *UserWalletUpdateOne {
	uwuo.mutation.ClearUserID()
	return uwuo
}

// SetUser sets the "user" edge to the User entity.
func (uwuo *UserWalletUpdateOne) SetUser(u *User) *UserWalletUpdateOne {
	return uwuo.SetUserID(u.ID)
}

// AddUserWalletCardIDs adds the "user_wallet_cards" edge to the UserCard entity by IDs.
func (uwuo *UserWalletUpdateOne) AddUserWalletCardIDs(ids ...int64) *UserWalletUpdateOne {
	uwuo.mutation.AddUserWalletCardIDs(ids...)
	return uwuo
}

// AddUserWalletCards adds the "user_wallet_cards" edges to the UserCard entity.
func (uwuo *UserWalletUpdateOne) AddUserWalletCards(u ...*UserCard) *UserWalletUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uwuo.AddUserWalletCardIDs(ids...)
}

// Mutation returns the UserWalletMutation object of the builder.
func (uwuo *UserWalletUpdateOne) Mutation() *UserWalletMutation {
	return uwuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uwuo *UserWalletUpdateOne) ClearUser() *UserWalletUpdateOne {
	uwuo.mutation.ClearUser()
	return uwuo
}

// ClearUserWalletCards clears all "user_wallet_cards" edges to the UserCard entity.
func (uwuo *UserWalletUpdateOne) ClearUserWalletCards() *UserWalletUpdateOne {
	uwuo.mutation.ClearUserWalletCards()
	return uwuo
}

// RemoveUserWalletCardIDs removes the "user_wallet_cards" edge to UserCard entities by IDs.
func (uwuo *UserWalletUpdateOne) RemoveUserWalletCardIDs(ids ...int64) *UserWalletUpdateOne {
	uwuo.mutation.RemoveUserWalletCardIDs(ids...)
	return uwuo
}

// RemoveUserWalletCards removes "user_wallet_cards" edges to UserCard entities.
func (uwuo *UserWalletUpdateOne) RemoveUserWalletCards(u ...*UserCard) *UserWalletUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uwuo.RemoveUserWalletCardIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uwuo *UserWalletUpdateOne) Select(field string, fields ...string) *UserWalletUpdateOne {
	uwuo.fields = append([]string{field}, fields...)
	return uwuo
}

// Save executes the query and returns the updated UserWallet entity.
func (uwuo *UserWalletUpdateOne) Save(ctx context.Context) (*UserWallet, error) {
	var (
		err  error
		node *UserWallet
	)
	uwuo.defaults()
	if len(uwuo.hooks) == 0 {
		node, err = uwuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uwuo.mutation = mutation
			node, err = uwuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uwuo.hooks) - 1; i >= 0; i-- {
			if uwuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uwuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uwuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uwuo *UserWalletUpdateOne) SaveX(ctx context.Context) *UserWallet {
	node, err := uwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uwuo *UserWalletUpdateOne) Exec(ctx context.Context) error {
	_, err := uwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwuo *UserWalletUpdateOne) ExecX(ctx context.Context) {
	if err := uwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwuo *UserWalletUpdateOne) defaults() {
	if _, ok := uwuo.mutation.UpdatedAt(); !ok {
		v := userwallet.UpdateDefaultUpdatedAt()
		uwuo.mutation.SetUpdatedAt(v)
	}
}

func (uwuo *UserWalletUpdateOne) sqlSave(ctx context.Context) (_node *UserWallet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userwallet.Table,
			Columns: userwallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userwallet.FieldID,
			},
		},
	}
	id, ok := uwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserWallet.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userwallet.FieldID)
		for _, f := range fields {
			if !userwallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userwallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uwuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldUpdatedAt,
		})
	}
	if value, ok := uwuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userwallet.FieldDeletedAt,
		})
	}
	if uwuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userwallet.FieldDeletedAt,
		})
	}
	if value, ok := uwuo.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userwallet.FieldBalance,
		})
	}
	if value, ok := uwuo.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userwallet.FieldBalance,
		})
	}
	if uwuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userwallet.UserTable,
			Columns: []string{userwallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uwuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userwallet.UserTable,
			Columns: []string{userwallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uwuo.mutation.UserWalletCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userwallet.UserWalletCardsTable,
			Columns: []string{userwallet.UserWalletCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: usercard.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uwuo.mutation.RemovedUserWalletCardsIDs(); len(nodes) > 0 && !uwuo.mutation.UserWalletCardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userwallet.UserWalletCardsTable,
			Columns: []string{userwallet.UserWalletCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: usercard.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uwuo.mutation.UserWalletCardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userwallet.UserWalletCardsTable,
			Columns: []string{userwallet.UserWalletCardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: usercard.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserWallet{config: uwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userwallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
