// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"

	"github.com/indrasaputra/spenmo/internal/repository/model/ent/predicate"
	"github.com/indrasaputra/spenmo/internal/repository/model/ent/user"
	"github.com/indrasaputra/spenmo/internal/repository/model/ent/usercard"
	"github.com/indrasaputra/spenmo/internal/repository/model/ent/userwallet"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser       = "User"
	TypeUserCard   = "UserCard"
	TypeUserWallet = "UserWallet"
)

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int64
	created_at          *time.Time
	updated_at          *time.Time
	deleted_at          *time.Time
	name                *string
	email               *string
	password            *string
	clearedFields       map[string]struct{}
	user_wallets        map[int64]struct{}
	removeduser_wallets map[int64]struct{}
	cleareduser_wallets bool
	user_cards          map[int64]struct{}
	removeduser_cards   map[int64]struct{}
	cleareduser_cards   bool
	done                bool
	oldValue            func(context.Context) (*User, error)
	predicates          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// AddUserWalletIDs adds the "user_wallets" edge to the UserWallet entity by ids.
func (m *UserMutation) AddUserWalletIDs(ids ...int64) {
	if m.user_wallets == nil {
		m.user_wallets = make(map[int64]struct{})
	}
	for i := range ids {
		m.user_wallets[ids[i]] = struct{}{}
	}
}

// ClearUserWallets clears the "user_wallets" edge to the UserWallet entity.
func (m *UserMutation) ClearUserWallets() {
	m.cleareduser_wallets = true
}

// UserWalletsCleared reports if the "user_wallets" edge to the UserWallet entity was cleared.
func (m *UserMutation) UserWalletsCleared() bool {
	return m.cleareduser_wallets
}

// RemoveUserWalletIDs removes the "user_wallets" edge to the UserWallet entity by IDs.
func (m *UserMutation) RemoveUserWalletIDs(ids ...int64) {
	if m.removeduser_wallets == nil {
		m.removeduser_wallets = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.user_wallets, ids[i])
		m.removeduser_wallets[ids[i]] = struct{}{}
	}
}

// RemovedUserWallets returns the removed IDs of the "user_wallets" edge to the UserWallet entity.
func (m *UserMutation) RemovedUserWalletsIDs() (ids []int64) {
	for id := range m.removeduser_wallets {
		ids = append(ids, id)
	}
	return
}

// UserWalletsIDs returns the "user_wallets" edge IDs in the mutation.
func (m *UserMutation) UserWalletsIDs() (ids []int64) {
	for id := range m.user_wallets {
		ids = append(ids, id)
	}
	return
}

// ResetUserWallets resets all changes to the "user_wallets" edge.
func (m *UserMutation) ResetUserWallets() {
	m.user_wallets = nil
	m.cleareduser_wallets = false
	m.removeduser_wallets = nil
}

// AddUserCardIDs adds the "user_cards" edge to the UserCard entity by ids.
func (m *UserMutation) AddUserCardIDs(ids ...int64) {
	if m.user_cards == nil {
		m.user_cards = make(map[int64]struct{})
	}
	for i := range ids {
		m.user_cards[ids[i]] = struct{}{}
	}
}

// ClearUserCards clears the "user_cards" edge to the UserCard entity.
func (m *UserMutation) ClearUserCards() {
	m.cleareduser_cards = true
}

// UserCardsCleared reports if the "user_cards" edge to the UserCard entity was cleared.
func (m *UserMutation) UserCardsCleared() bool {
	return m.cleareduser_cards
}

// RemoveUserCardIDs removes the "user_cards" edge to the UserCard entity by IDs.
func (m *UserMutation) RemoveUserCardIDs(ids ...int64) {
	if m.removeduser_cards == nil {
		m.removeduser_cards = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.user_cards, ids[i])
		m.removeduser_cards[ids[i]] = struct{}{}
	}
}

// RemovedUserCards returns the removed IDs of the "user_cards" edge to the UserCard entity.
func (m *UserMutation) RemovedUserCardsIDs() (ids []int64) {
	for id := range m.removeduser_cards {
		ids = append(ids, id)
	}
	return
}

// UserCardsIDs returns the "user_cards" edge IDs in the mutation.
func (m *UserMutation) UserCardsIDs() (ids []int64) {
	for id := range m.user_cards {
		ids = append(ids, id)
	}
	return
}

// ResetUserCards resets all changes to the "user_cards" edge.
func (m *UserMutation) ResetUserCards() {
	m.user_cards = nil
	m.cleareduser_cards = false
	m.removeduser_cards = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user_wallets != nil {
		edges = append(edges, user.EdgeUserWallets)
	}
	if m.user_cards != nil {
		edges = append(edges, user.EdgeUserCards)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserWallets:
		ids := make([]ent.Value, 0, len(m.user_wallets))
		for id := range m.user_wallets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserCards:
		ids := make([]ent.Value, 0, len(m.user_cards))
		for id := range m.user_cards {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeduser_wallets != nil {
		edges = append(edges, user.EdgeUserWallets)
	}
	if m.removeduser_cards != nil {
		edges = append(edges, user.EdgeUserCards)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserWallets:
		ids := make([]ent.Value, 0, len(m.removeduser_wallets))
		for id := range m.removeduser_wallets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserCards:
		ids := make([]ent.Value, 0, len(m.removeduser_cards))
		for id := range m.removeduser_cards {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser_wallets {
		edges = append(edges, user.EdgeUserWallets)
	}
	if m.cleareduser_cards {
		edges = append(edges, user.EdgeUserCards)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserWallets:
		return m.cleareduser_wallets
	case user.EdgeUserCards:
		return m.cleareduser_cards
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserWallets:
		m.ResetUserWallets()
		return nil
	case user.EdgeUserCards:
		m.ResetUserCards()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserCardMutation represents an operation that mutates the UserCard nodes in the graph.
type UserCardMutation struct {
	config
	op               Op
	typ              string
	id               *int64
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	limit_daily      *float64
	addlimit_daily   *float64
	limit_monthly    *float64
	addlimit_monthly *float64
	clearedFields    map[string]struct{}
	user             *int64
	cleareduser      bool
	wallet           *int64
	clearedwallet    bool
	done             bool
	oldValue         func(context.Context) (*UserCard, error)
	predicates       []predicate.UserCard
}

var _ ent.Mutation = (*UserCardMutation)(nil)

// usercardOption allows management of the mutation configuration using functional options.
type usercardOption func(*UserCardMutation)

// newUserCardMutation creates new mutation for the UserCard entity.
func newUserCardMutation(c config, op Op, opts ...usercardOption) *UserCardMutation {
	m := &UserCardMutation{
		config:        c,
		op:            op,
		typ:           TypeUserCard,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserCardID sets the ID field of the mutation.
func withUserCardID(id int64) usercardOption {
	return func(m *UserCardMutation) {
		var (
			err   error
			once  sync.Once
			value *UserCard
		)
		m.oldValue = func(ctx context.Context) (*UserCard, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserCard.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserCard sets the old UserCard of the mutation.
func withUserCard(node *UserCard) usercardOption {
	return func(m *UserCardMutation) {
		m.oldValue = func(context.Context) (*UserCard, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserCardMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserCardMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserCard entities.
func (m *UserCardMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserCardMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *UserCardMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserCardMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserCard entity.
// If the UserCard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCardMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserCardMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserCardMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserCardMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserCard entity.
// If the UserCard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCardMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserCardMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserCardMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserCardMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the UserCard entity.
// If the UserCard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCardMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserCardMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[usercard.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserCardMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[usercard.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserCardMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, usercard.FieldDeletedAt)
}

// SetUserID sets the "user_id" field.
func (m *UserCardMutation) SetUserID(i int64) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserCardMutation) UserID() (r int64, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserCard entity.
// If the UserCard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCardMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *UserCardMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[usercard.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *UserCardMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[usercard.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserCardMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, usercard.FieldUserID)
}

// SetWalletID sets the "wallet_id" field.
func (m *UserCardMutation) SetWalletID(i int64) {
	m.wallet = &i
}

// WalletID returns the value of the "wallet_id" field in the mutation.
func (m *UserCardMutation) WalletID() (r int64, exists bool) {
	v := m.wallet
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletID returns the old "wallet_id" field's value of the UserCard entity.
// If the UserCard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCardMutation) OldWalletID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWalletID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWalletID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletID: %w", err)
	}
	return oldValue.WalletID, nil
}

// ClearWalletID clears the value of the "wallet_id" field.
func (m *UserCardMutation) ClearWalletID() {
	m.wallet = nil
	m.clearedFields[usercard.FieldWalletID] = struct{}{}
}

// WalletIDCleared returns if the "wallet_id" field was cleared in this mutation.
func (m *UserCardMutation) WalletIDCleared() bool {
	_, ok := m.clearedFields[usercard.FieldWalletID]
	return ok
}

// ResetWalletID resets all changes to the "wallet_id" field.
func (m *UserCardMutation) ResetWalletID() {
	m.wallet = nil
	delete(m.clearedFields, usercard.FieldWalletID)
}

// SetLimitDaily sets the "limit_daily" field.
func (m *UserCardMutation) SetLimitDaily(f float64) {
	m.limit_daily = &f
	m.addlimit_daily = nil
}

// LimitDaily returns the value of the "limit_daily" field in the mutation.
func (m *UserCardMutation) LimitDaily() (r float64, exists bool) {
	v := m.limit_daily
	if v == nil {
		return
	}
	return *v, true
}

// OldLimitDaily returns the old "limit_daily" field's value of the UserCard entity.
// If the UserCard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCardMutation) OldLimitDaily(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLimitDaily is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLimitDaily requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLimitDaily: %w", err)
	}
	return oldValue.LimitDaily, nil
}

// AddLimitDaily adds f to the "limit_daily" field.
func (m *UserCardMutation) AddLimitDaily(f float64) {
	if m.addlimit_daily != nil {
		*m.addlimit_daily += f
	} else {
		m.addlimit_daily = &f
	}
}

// AddedLimitDaily returns the value that was added to the "limit_daily" field in this mutation.
func (m *UserCardMutation) AddedLimitDaily() (r float64, exists bool) {
	v := m.addlimit_daily
	if v == nil {
		return
	}
	return *v, true
}

// ResetLimitDaily resets all changes to the "limit_daily" field.
func (m *UserCardMutation) ResetLimitDaily() {
	m.limit_daily = nil
	m.addlimit_daily = nil
}

// SetLimitMonthly sets the "limit_monthly" field.
func (m *UserCardMutation) SetLimitMonthly(f float64) {
	m.limit_monthly = &f
	m.addlimit_monthly = nil
}

// LimitMonthly returns the value of the "limit_monthly" field in the mutation.
func (m *UserCardMutation) LimitMonthly() (r float64, exists bool) {
	v := m.limit_monthly
	if v == nil {
		return
	}
	return *v, true
}

// OldLimitMonthly returns the old "limit_monthly" field's value of the UserCard entity.
// If the UserCard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCardMutation) OldLimitMonthly(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLimitMonthly is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLimitMonthly requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLimitMonthly: %w", err)
	}
	return oldValue.LimitMonthly, nil
}

// AddLimitMonthly adds f to the "limit_monthly" field.
func (m *UserCardMutation) AddLimitMonthly(f float64) {
	if m.addlimit_monthly != nil {
		*m.addlimit_monthly += f
	} else {
		m.addlimit_monthly = &f
	}
}

// AddedLimitMonthly returns the value that was added to the "limit_monthly" field in this mutation.
func (m *UserCardMutation) AddedLimitMonthly() (r float64, exists bool) {
	v := m.addlimit_monthly
	if v == nil {
		return
	}
	return *v, true
}

// ResetLimitMonthly resets all changes to the "limit_monthly" field.
func (m *UserCardMutation) ResetLimitMonthly() {
	m.limit_monthly = nil
	m.addlimit_monthly = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserCardMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserCardMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserCardMutation) UserIDs() (ids []int64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserCardMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearWallet clears the "wallet" edge to the UserWallet entity.
func (m *UserCardMutation) ClearWallet() {
	m.clearedwallet = true
}

// WalletCleared reports if the "wallet" edge to the UserWallet entity was cleared.
func (m *UserCardMutation) WalletCleared() bool {
	return m.WalletIDCleared() || m.clearedwallet
}

// WalletIDs returns the "wallet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WalletID instead. It exists only for internal usage by the builders.
func (m *UserCardMutation) WalletIDs() (ids []int64) {
	if id := m.wallet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWallet resets all changes to the "wallet" edge.
func (m *UserCardMutation) ResetWallet() {
	m.wallet = nil
	m.clearedwallet = false
}

// Where appends a list predicates to the UserCardMutation builder.
func (m *UserCardMutation) Where(ps ...predicate.UserCard) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserCardMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserCard).
func (m *UserCardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserCardMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, usercard.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, usercard.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, usercard.FieldDeletedAt)
	}
	if m.user != nil {
		fields = append(fields, usercard.FieldUserID)
	}
	if m.wallet != nil {
		fields = append(fields, usercard.FieldWalletID)
	}
	if m.limit_daily != nil {
		fields = append(fields, usercard.FieldLimitDaily)
	}
	if m.limit_monthly != nil {
		fields = append(fields, usercard.FieldLimitMonthly)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserCardMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usercard.FieldCreatedAt:
		return m.CreatedAt()
	case usercard.FieldUpdatedAt:
		return m.UpdatedAt()
	case usercard.FieldDeletedAt:
		return m.DeletedAt()
	case usercard.FieldUserID:
		return m.UserID()
	case usercard.FieldWalletID:
		return m.WalletID()
	case usercard.FieldLimitDaily:
		return m.LimitDaily()
	case usercard.FieldLimitMonthly:
		return m.LimitMonthly()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserCardMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usercard.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case usercard.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case usercard.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case usercard.FieldUserID:
		return m.OldUserID(ctx)
	case usercard.FieldWalletID:
		return m.OldWalletID(ctx)
	case usercard.FieldLimitDaily:
		return m.OldLimitDaily(ctx)
	case usercard.FieldLimitMonthly:
		return m.OldLimitMonthly(ctx)
	}
	return nil, fmt.Errorf("unknown UserCard field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserCardMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usercard.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case usercard.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case usercard.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case usercard.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case usercard.FieldWalletID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletID(v)
		return nil
	case usercard.FieldLimitDaily:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLimitDaily(v)
		return nil
	case usercard.FieldLimitMonthly:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLimitMonthly(v)
		return nil
	}
	return fmt.Errorf("unknown UserCard field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserCardMutation) AddedFields() []string {
	var fields []string
	if m.addlimit_daily != nil {
		fields = append(fields, usercard.FieldLimitDaily)
	}
	if m.addlimit_monthly != nil {
		fields = append(fields, usercard.FieldLimitMonthly)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserCardMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usercard.FieldLimitDaily:
		return m.AddedLimitDaily()
	case usercard.FieldLimitMonthly:
		return m.AddedLimitMonthly()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserCardMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usercard.FieldLimitDaily:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLimitDaily(v)
		return nil
	case usercard.FieldLimitMonthly:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLimitMonthly(v)
		return nil
	}
	return fmt.Errorf("unknown UserCard numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserCardMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(usercard.FieldDeletedAt) {
		fields = append(fields, usercard.FieldDeletedAt)
	}
	if m.FieldCleared(usercard.FieldUserID) {
		fields = append(fields, usercard.FieldUserID)
	}
	if m.FieldCleared(usercard.FieldWalletID) {
		fields = append(fields, usercard.FieldWalletID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserCardMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserCardMutation) ClearField(name string) error {
	switch name {
	case usercard.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case usercard.FieldUserID:
		m.ClearUserID()
		return nil
	case usercard.FieldWalletID:
		m.ClearWalletID()
		return nil
	}
	return fmt.Errorf("unknown UserCard nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserCardMutation) ResetField(name string) error {
	switch name {
	case usercard.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case usercard.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case usercard.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case usercard.FieldUserID:
		m.ResetUserID()
		return nil
	case usercard.FieldWalletID:
		m.ResetWalletID()
		return nil
	case usercard.FieldLimitDaily:
		m.ResetLimitDaily()
		return nil
	case usercard.FieldLimitMonthly:
		m.ResetLimitMonthly()
		return nil
	}
	return fmt.Errorf("unknown UserCard field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserCardMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, usercard.EdgeUser)
	}
	if m.wallet != nil {
		edges = append(edges, usercard.EdgeWallet)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserCardMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usercard.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case usercard.EdgeWallet:
		if id := m.wallet; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserCardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserCardMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserCardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, usercard.EdgeUser)
	}
	if m.clearedwallet {
		edges = append(edges, usercard.EdgeWallet)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserCardMutation) EdgeCleared(name string) bool {
	switch name {
	case usercard.EdgeUser:
		return m.cleareduser
	case usercard.EdgeWallet:
		return m.clearedwallet
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserCardMutation) ClearEdge(name string) error {
	switch name {
	case usercard.EdgeUser:
		m.ClearUser()
		return nil
	case usercard.EdgeWallet:
		m.ClearWallet()
		return nil
	}
	return fmt.Errorf("unknown UserCard unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserCardMutation) ResetEdge(name string) error {
	switch name {
	case usercard.EdgeUser:
		m.ResetUser()
		return nil
	case usercard.EdgeWallet:
		m.ResetWallet()
		return nil
	}
	return fmt.Errorf("unknown UserCard edge %s", name)
}

// UserWalletMutation represents an operation that mutates the UserWallet nodes in the graph.
type UserWalletMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int64
	created_at               *time.Time
	updated_at               *time.Time
	deleted_at               *time.Time
	balance                  *float64
	addbalance               *float64
	clearedFields            map[string]struct{}
	user                     *int64
	cleareduser              bool
	user_wallet_cards        map[int64]struct{}
	removeduser_wallet_cards map[int64]struct{}
	cleareduser_wallet_cards bool
	done                     bool
	oldValue                 func(context.Context) (*UserWallet, error)
	predicates               []predicate.UserWallet
}

var _ ent.Mutation = (*UserWalletMutation)(nil)

// userwalletOption allows management of the mutation configuration using functional options.
type userwalletOption func(*UserWalletMutation)

// newUserWalletMutation creates new mutation for the UserWallet entity.
func newUserWalletMutation(c config, op Op, opts ...userwalletOption) *UserWalletMutation {
	m := &UserWalletMutation{
		config:        c,
		op:            op,
		typ:           TypeUserWallet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserWalletID sets the ID field of the mutation.
func withUserWalletID(id int64) userwalletOption {
	return func(m *UserWalletMutation) {
		var (
			err   error
			once  sync.Once
			value *UserWallet
		)
		m.oldValue = func(ctx context.Context) (*UserWallet, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserWallet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserWallet sets the old UserWallet of the mutation.
func withUserWallet(node *UserWallet) userwalletOption {
	return func(m *UserWalletMutation) {
		m.oldValue = func(context.Context) (*UserWallet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserWalletMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserWalletMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserWallet entities.
func (m *UserWalletMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserWalletMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *UserWalletMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserWalletMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserWallet entity.
// If the UserWallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserWalletMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserWalletMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserWalletMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserWallet entity.
// If the UserWallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserWalletMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserWalletMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserWalletMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the UserWallet entity.
// If the UserWallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserWalletMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[userwallet.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserWalletMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[userwallet.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserWalletMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, userwallet.FieldDeletedAt)
}

// SetBalance sets the "balance" field.
func (m *UserWalletMutation) SetBalance(f float64) {
	m.balance = &f
	m.addbalance = nil
}

// Balance returns the value of the "balance" field in the mutation.
func (m *UserWalletMutation) Balance() (r float64, exists bool) {
	v := m.balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBalance returns the old "balance" field's value of the UserWallet entity.
// If the UserWallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletMutation) OldBalance(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalance: %w", err)
	}
	return oldValue.Balance, nil
}

// AddBalance adds f to the "balance" field.
func (m *UserWalletMutation) AddBalance(f float64) {
	if m.addbalance != nil {
		*m.addbalance += f
	} else {
		m.addbalance = &f
	}
}

// AddedBalance returns the value that was added to the "balance" field in this mutation.
func (m *UserWalletMutation) AddedBalance() (r float64, exists bool) {
	v := m.addbalance
	if v == nil {
		return
	}
	return *v, true
}

// ResetBalance resets all changes to the "balance" field.
func (m *UserWalletMutation) ResetBalance() {
	m.balance = nil
	m.addbalance = nil
}

// SetUserID sets the "user_id" field.
func (m *UserWalletMutation) SetUserID(i int64) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserWalletMutation) UserID() (r int64, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserWallet entity.
// If the UserWallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWalletMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *UserWalletMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[userwallet.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *UserWalletMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[userwallet.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserWalletMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, userwallet.FieldUserID)
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserWalletMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserWalletMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserWalletMutation) UserIDs() (ids []int64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserWalletMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddUserWalletCardIDs adds the "user_wallet_cards" edge to the UserCard entity by ids.
func (m *UserWalletMutation) AddUserWalletCardIDs(ids ...int64) {
	if m.user_wallet_cards == nil {
		m.user_wallet_cards = make(map[int64]struct{})
	}
	for i := range ids {
		m.user_wallet_cards[ids[i]] = struct{}{}
	}
}

// ClearUserWalletCards clears the "user_wallet_cards" edge to the UserCard entity.
func (m *UserWalletMutation) ClearUserWalletCards() {
	m.cleareduser_wallet_cards = true
}

// UserWalletCardsCleared reports if the "user_wallet_cards" edge to the UserCard entity was cleared.
func (m *UserWalletMutation) UserWalletCardsCleared() bool {
	return m.cleareduser_wallet_cards
}

// RemoveUserWalletCardIDs removes the "user_wallet_cards" edge to the UserCard entity by IDs.
func (m *UserWalletMutation) RemoveUserWalletCardIDs(ids ...int64) {
	if m.removeduser_wallet_cards == nil {
		m.removeduser_wallet_cards = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.user_wallet_cards, ids[i])
		m.removeduser_wallet_cards[ids[i]] = struct{}{}
	}
}

// RemovedUserWalletCards returns the removed IDs of the "user_wallet_cards" edge to the UserCard entity.
func (m *UserWalletMutation) RemovedUserWalletCardsIDs() (ids []int64) {
	for id := range m.removeduser_wallet_cards {
		ids = append(ids, id)
	}
	return
}

// UserWalletCardsIDs returns the "user_wallet_cards" edge IDs in the mutation.
func (m *UserWalletMutation) UserWalletCardsIDs() (ids []int64) {
	for id := range m.user_wallet_cards {
		ids = append(ids, id)
	}
	return
}

// ResetUserWalletCards resets all changes to the "user_wallet_cards" edge.
func (m *UserWalletMutation) ResetUserWalletCards() {
	m.user_wallet_cards = nil
	m.cleareduser_wallet_cards = false
	m.removeduser_wallet_cards = nil
}

// Where appends a list predicates to the UserWalletMutation builder.
func (m *UserWalletMutation) Where(ps ...predicate.UserWallet) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserWalletMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserWallet).
func (m *UserWalletMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserWalletMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, userwallet.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, userwallet.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, userwallet.FieldDeletedAt)
	}
	if m.balance != nil {
		fields = append(fields, userwallet.FieldBalance)
	}
	if m.user != nil {
		fields = append(fields, userwallet.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserWalletMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userwallet.FieldCreatedAt:
		return m.CreatedAt()
	case userwallet.FieldUpdatedAt:
		return m.UpdatedAt()
	case userwallet.FieldDeletedAt:
		return m.DeletedAt()
	case userwallet.FieldBalance:
		return m.Balance()
	case userwallet.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserWalletMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userwallet.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case userwallet.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case userwallet.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case userwallet.FieldBalance:
		return m.OldBalance(ctx)
	case userwallet.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown UserWallet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserWalletMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userwallet.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case userwallet.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case userwallet.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case userwallet.FieldBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalance(v)
		return nil
	case userwallet.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown UserWallet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserWalletMutation) AddedFields() []string {
	var fields []string
	if m.addbalance != nil {
		fields = append(fields, userwallet.FieldBalance)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserWalletMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userwallet.FieldBalance:
		return m.AddedBalance()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserWalletMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userwallet.FieldBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBalance(v)
		return nil
	}
	return fmt.Errorf("unknown UserWallet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserWalletMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userwallet.FieldDeletedAt) {
		fields = append(fields, userwallet.FieldDeletedAt)
	}
	if m.FieldCleared(userwallet.FieldUserID) {
		fields = append(fields, userwallet.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserWalletMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserWalletMutation) ClearField(name string) error {
	switch name {
	case userwallet.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case userwallet.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown UserWallet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserWalletMutation) ResetField(name string) error {
	switch name {
	case userwallet.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case userwallet.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case userwallet.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case userwallet.FieldBalance:
		m.ResetBalance()
		return nil
	case userwallet.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown UserWallet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserWalletMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, userwallet.EdgeUser)
	}
	if m.user_wallet_cards != nil {
		edges = append(edges, userwallet.EdgeUserWalletCards)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserWalletMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userwallet.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case userwallet.EdgeUserWalletCards:
		ids := make([]ent.Value, 0, len(m.user_wallet_cards))
		for id := range m.user_wallet_cards {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserWalletMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeduser_wallet_cards != nil {
		edges = append(edges, userwallet.EdgeUserWalletCards)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserWalletMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case userwallet.EdgeUserWalletCards:
		ids := make([]ent.Value, 0, len(m.removeduser_wallet_cards))
		for id := range m.removeduser_wallet_cards {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserWalletMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, userwallet.EdgeUser)
	}
	if m.cleareduser_wallet_cards {
		edges = append(edges, userwallet.EdgeUserWalletCards)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserWalletMutation) EdgeCleared(name string) bool {
	switch name {
	case userwallet.EdgeUser:
		return m.cleareduser
	case userwallet.EdgeUserWalletCards:
		return m.cleareduser_wallet_cards
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserWalletMutation) ClearEdge(name string) error {
	switch name {
	case userwallet.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserWallet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserWalletMutation) ResetEdge(name string) error {
	switch name {
	case userwallet.EdgeUser:
		m.ResetUser()
		return nil
	case userwallet.EdgeUserWalletCards:
		m.ResetUserWalletCards()
		return nil
	}
	return fmt.Errorf("unknown UserWallet edge %s", name)
}
