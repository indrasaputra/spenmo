// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/indrasaputra/spenmo/internal/repository/model/ent/user"
	"github.com/indrasaputra/spenmo/internal/repository/model/ent/usercard"
	"github.com/indrasaputra/spenmo/internal/repository/model/ent/userwallet"
)

// UserCardCreate is the builder for creating a UserCard entity.
type UserCardCreate struct {
	config
	mutation *UserCardMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ucc *UserCardCreate) SetCreatedAt(t time.Time) *UserCardCreate {
	ucc.mutation.SetCreatedAt(t)
	return ucc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ucc *UserCardCreate) SetNillableCreatedAt(t *time.Time) *UserCardCreate {
	if t != nil {
		ucc.SetCreatedAt(*t)
	}
	return ucc
}

// SetUpdatedAt sets the "updated_at" field.
func (ucc *UserCardCreate) SetUpdatedAt(t time.Time) *UserCardCreate {
	ucc.mutation.SetUpdatedAt(t)
	return ucc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ucc *UserCardCreate) SetNillableUpdatedAt(t *time.Time) *UserCardCreate {
	if t != nil {
		ucc.SetUpdatedAt(*t)
	}
	return ucc
}

// SetDeletedAt sets the "deleted_at" field.
func (ucc *UserCardCreate) SetDeletedAt(t time.Time) *UserCardCreate {
	ucc.mutation.SetDeletedAt(t)
	return ucc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ucc *UserCardCreate) SetNillableDeletedAt(t *time.Time) *UserCardCreate {
	if t != nil {
		ucc.SetDeletedAt(*t)
	}
	return ucc
}

// SetUserID sets the "user_id" field.
func (ucc *UserCardCreate) SetUserID(i int64) *UserCardCreate {
	ucc.mutation.SetUserID(i)
	return ucc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ucc *UserCardCreate) SetNillableUserID(i *int64) *UserCardCreate {
	if i != nil {
		ucc.SetUserID(*i)
	}
	return ucc
}

// SetWalletID sets the "wallet_id" field.
func (ucc *UserCardCreate) SetWalletID(i int64) *UserCardCreate {
	ucc.mutation.SetWalletID(i)
	return ucc
}

// SetNillableWalletID sets the "wallet_id" field if the given value is not nil.
func (ucc *UserCardCreate) SetNillableWalletID(i *int64) *UserCardCreate {
	if i != nil {
		ucc.SetWalletID(*i)
	}
	return ucc
}

// SetLimitDaily sets the "limit_daily" field.
func (ucc *UserCardCreate) SetLimitDaily(f float64) *UserCardCreate {
	ucc.mutation.SetLimitDaily(f)
	return ucc
}

// SetLimitMonthly sets the "limit_monthly" field.
func (ucc *UserCardCreate) SetLimitMonthly(f float64) *UserCardCreate {
	ucc.mutation.SetLimitMonthly(f)
	return ucc
}

// SetID sets the "id" field.
func (ucc *UserCardCreate) SetID(i int64) *UserCardCreate {
	ucc.mutation.SetID(i)
	return ucc
}

// SetUser sets the "user" edge to the User entity.
func (ucc *UserCardCreate) SetUser(u *User) *UserCardCreate {
	return ucc.SetUserID(u.ID)
}

// SetWallet sets the "wallet" edge to the UserWallet entity.
func (ucc *UserCardCreate) SetWallet(u *UserWallet) *UserCardCreate {
	return ucc.SetWalletID(u.ID)
}

// Mutation returns the UserCardMutation object of the builder.
func (ucc *UserCardCreate) Mutation() *UserCardMutation {
	return ucc.mutation
}

// Save creates the UserCard in the database.
func (ucc *UserCardCreate) Save(ctx context.Context) (*UserCard, error) {
	var (
		err  error
		node *UserCard
	)
	ucc.defaults()
	if len(ucc.hooks) == 0 {
		if err = ucc.check(); err != nil {
			return nil, err
		}
		node, err = ucc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserCardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ucc.check(); err != nil {
				return nil, err
			}
			ucc.mutation = mutation
			if node, err = ucc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ucc.hooks) - 1; i >= 0; i-- {
			if ucc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ucc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ucc *UserCardCreate) SaveX(ctx context.Context) *UserCard {
	v, err := ucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucc *UserCardCreate) Exec(ctx context.Context) error {
	_, err := ucc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucc *UserCardCreate) ExecX(ctx context.Context) {
	if err := ucc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucc *UserCardCreate) defaults() {
	if _, ok := ucc.mutation.CreatedAt(); !ok {
		v := usercard.DefaultCreatedAt()
		ucc.mutation.SetCreatedAt(v)
	}
	if _, ok := ucc.mutation.UpdatedAt(); !ok {
		v := usercard.DefaultUpdatedAt()
		ucc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucc *UserCardCreate) check() error {
	if _, ok := ucc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ucc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := ucc.mutation.LimitDaily(); !ok {
		return &ValidationError{Name: "limit_daily", err: errors.New(`ent: missing required field "limit_daily"`)}
	}
	if _, ok := ucc.mutation.LimitMonthly(); !ok {
		return &ValidationError{Name: "limit_monthly", err: errors.New(`ent: missing required field "limit_monthly"`)}
	}
	return nil
}

func (ucc *UserCardCreate) sqlSave(ctx context.Context) (*UserCard, error) {
	_node, _spec := ucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ucc *UserCardCreate) createSpec() (*UserCard, *sqlgraph.CreateSpec) {
	var (
		_node = &UserCard{config: ucc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usercard.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: usercard.FieldID,
			},
		}
	)
	if id, ok := ucc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ucc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usercard.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ucc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usercard.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ucc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usercard.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ucc.mutation.LimitDaily(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercard.FieldLimitDaily,
		})
		_node.LimitDaily = value
	}
	if value, ok := ucc.mutation.LimitMonthly(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercard.FieldLimitMonthly,
		})
		_node.LimitMonthly = value
	}
	if nodes := ucc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercard.UserTable,
			Columns: []string{usercard.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ucc.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercard.WalletTable,
			Columns: []string{usercard.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: userwallet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WalletID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCardCreateBulk is the builder for creating many UserCard entities in bulk.
type UserCardCreateBulk struct {
	config
	builders []*UserCardCreate
}

// Save creates the UserCard entities in the database.
func (uccb *UserCardCreateBulk) Save(ctx context.Context) ([]*UserCard, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uccb.builders))
	nodes := make([]*UserCard, len(uccb.builders))
	mutators := make([]Mutator, len(uccb.builders))
	for i := range uccb.builders {
		func(i int, root context.Context) {
			builder := uccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserCardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uccb *UserCardCreateBulk) SaveX(ctx context.Context) []*UserCard {
	v, err := uccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uccb *UserCardCreateBulk) Exec(ctx context.Context) error {
	_, err := uccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uccb *UserCardCreateBulk) ExecX(ctx context.Context) {
	if err := uccb.Exec(ctx); err != nil {
		panic(err)
	}
}
