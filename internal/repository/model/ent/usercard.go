// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"

	"github.com/indrasaputra/spenmo/internal/repository/model/ent/user"
	"github.com/indrasaputra/spenmo/internal/repository/model/ent/usercard"
	"github.com/indrasaputra/spenmo/internal/repository/model/ent/userwallet"
)

// UserCard is the model entity for the UserCard schema.
type UserCard struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// WalletID holds the value of the "wallet_id" field.
	WalletID int64 `json:"wallet_id,omitempty"`
	// LimitDaily holds the value of the "limit_daily" field.
	LimitDaily float64 `json:"limit_daily,omitempty"`
	// LimitMonthly holds the value of the "limit_monthly" field.
	LimitMonthly float64 `json:"limit_monthly,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserCardQuery when eager-loading is set.
	Edges UserCardEdges `json:"edges"`
}

// UserCardEdges holds the relations/edges for other nodes in the graph.
type UserCardEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Wallet holds the value of the wallet edge.
	Wallet *UserWallet `json:"wallet,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserCardEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// WalletOrErr returns the Wallet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserCardEdges) WalletOrErr() (*UserWallet, error) {
	if e.loadedTypes[1] {
		if e.Wallet == nil {
			// The edge wallet was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: userwallet.Label}
		}
		return e.Wallet, nil
	}
	return nil, &NotLoadedError{edge: "wallet"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserCard) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usercard.FieldLimitDaily, usercard.FieldLimitMonthly:
			values[i] = new(sql.NullFloat64)
		case usercard.FieldID, usercard.FieldUserID, usercard.FieldWalletID:
			values[i] = new(sql.NullInt64)
		case usercard.FieldCreatedAt, usercard.FieldUpdatedAt, usercard.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserCard", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserCard fields.
func (uc *UserCard) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usercard.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uc.ID = int64(value.Int64)
		case usercard.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uc.CreatedAt = value.Time
			}
		case usercard.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uc.UpdatedAt = value.Time
			}
		case usercard.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				uc.DeletedAt = new(time.Time)
				*uc.DeletedAt = value.Time
			}
		case usercard.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uc.UserID = value.Int64
			}
		case usercard.FieldWalletID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_id", values[i])
			} else if value.Valid {
				uc.WalletID = value.Int64
			}
		case usercard.FieldLimitDaily:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field limit_daily", values[i])
			} else if value.Valid {
				uc.LimitDaily = value.Float64
			}
		case usercard.FieldLimitMonthly:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field limit_monthly", values[i])
			} else if value.Valid {
				uc.LimitMonthly = value.Float64
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserCard entity.
func (uc *UserCard) QueryUser() *UserQuery {
	return (&UserCardClient{config: uc.config}).QueryUser(uc)
}

// QueryWallet queries the "wallet" edge of the UserCard entity.
func (uc *UserCard) QueryWallet() *UserWalletQuery {
	return (&UserCardClient{config: uc.config}).QueryWallet(uc)
}

// Update returns a builder for updating this UserCard.
// Note that you need to call UserCard.Unwrap() before calling this method if this UserCard
// was returned from a transaction, and the transaction was committed or rolled back.
func (uc *UserCard) Update() *UserCardUpdateOne {
	return (&UserCardClient{config: uc.config}).UpdateOne(uc)
}

// Unwrap unwraps the UserCard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uc *UserCard) Unwrap() *UserCard {
	tx, ok := uc.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserCard is not a transactional entity")
	}
	uc.config.driver = tx.drv
	return uc
}

// String implements the fmt.Stringer.
func (uc *UserCard) String() string {
	var builder strings.Builder
	builder.WriteString("UserCard(")
	builder.WriteString(fmt.Sprintf("id=%v", uc.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(uc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(uc.UpdatedAt.Format(time.ANSIC))
	if v := uc.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", uc.UserID))
	builder.WriteString(", wallet_id=")
	builder.WriteString(fmt.Sprintf("%v", uc.WalletID))
	builder.WriteString(", limit_daily=")
	builder.WriteString(fmt.Sprintf("%v", uc.LimitDaily))
	builder.WriteString(", limit_monthly=")
	builder.WriteString(fmt.Sprintf("%v", uc.LimitMonthly))
	builder.WriteByte(')')
	return builder.String()
}

// UserCards is a parsable slice of UserCard.
type UserCards []*UserCard

func (uc UserCards) config(cfg config) {
	for _i := range uc {
		uc[_i].config = cfg
	}
}
