// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	"github.com/indrasaputra/spenmo/internal/repository/model/ent/migrate"
	"github.com/indrasaputra/spenmo/internal/repository/model/ent/user"
	"github.com/indrasaputra/spenmo/internal/repository/model/ent/usercard"
	"github.com/indrasaputra/spenmo/internal/repository/model/ent/userwallet"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserCard is the client for interacting with the UserCard builders.
	UserCard *UserCardClient
	// UserWallet is the client for interacting with the UserWallet builders.
	UserWallet *UserWalletClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.User = NewUserClient(c.config)
	c.UserCard = NewUserCardClient(c.config)
	c.UserWallet = NewUserWalletClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		User:       NewUserClient(cfg),
		UserCard:   NewUserCardClient(cfg),
		UserWallet: NewUserWalletClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:     cfg,
		User:       NewUserClient(cfg),
		UserCard:   NewUserCardClient(cfg),
		UserWallet: NewUserWalletClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		User.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.User.Use(hooks...)
	c.UserCard.Use(hooks...)
	c.UserWallet.Use(hooks...)
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserWallets queries the user_wallets edge of a User.
func (c *UserClient) QueryUserWallets(u *User) *UserWalletQuery {
	query := &UserWalletQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userwallet.Table, userwallet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserWalletsTable, user.UserWalletsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserCards queries the user_cards edge of a User.
func (c *UserClient) QueryUserCards(u *User) *UserCardQuery {
	query := &UserCardQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usercard.Table, usercard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserCardsTable, user.UserCardsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserCardClient is a client for the UserCard schema.
type UserCardClient struct {
	config
}

// NewUserCardClient returns a client for the UserCard from the given config.
func NewUserCardClient(c config) *UserCardClient {
	return &UserCardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usercard.Hooks(f(g(h())))`.
func (c *UserCardClient) Use(hooks ...Hook) {
	c.hooks.UserCard = append(c.hooks.UserCard, hooks...)
}

// Create returns a create builder for UserCard.
func (c *UserCardClient) Create() *UserCardCreate {
	mutation := newUserCardMutation(c.config, OpCreate)
	return &UserCardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserCard entities.
func (c *UserCardClient) CreateBulk(builders ...*UserCardCreate) *UserCardCreateBulk {
	return &UserCardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserCard.
func (c *UserCardClient) Update() *UserCardUpdate {
	mutation := newUserCardMutation(c.config, OpUpdate)
	return &UserCardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserCardClient) UpdateOne(uc *UserCard) *UserCardUpdateOne {
	mutation := newUserCardMutation(c.config, OpUpdateOne, withUserCard(uc))
	return &UserCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserCardClient) UpdateOneID(id int64) *UserCardUpdateOne {
	mutation := newUserCardMutation(c.config, OpUpdateOne, withUserCardID(id))
	return &UserCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserCard.
func (c *UserCardClient) Delete() *UserCardDelete {
	mutation := newUserCardMutation(c.config, OpDelete)
	return &UserCardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserCardClient) DeleteOne(uc *UserCard) *UserCardDeleteOne {
	return c.DeleteOneID(uc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserCardClient) DeleteOneID(id int64) *UserCardDeleteOne {
	builder := c.Delete().Where(usercard.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserCardDeleteOne{builder}
}

// Query returns a query builder for UserCard.
func (c *UserCardClient) Query() *UserCardQuery {
	return &UserCardQuery{
		config: c.config,
	}
}

// Get returns a UserCard entity by its id.
func (c *UserCardClient) Get(ctx context.Context, id int64) (*UserCard, error) {
	return c.Query().Where(usercard.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserCardClient) GetX(ctx context.Context, id int64) *UserCard {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserCard.
func (c *UserCardClient) QueryUser(uc *UserCard) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usercard.Table, usercard.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercard.UserTable, usercard.UserColumn),
		)
		fromV = sqlgraph.Neighbors(uc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWallet queries the wallet edge of a UserCard.
func (c *UserCardClient) QueryWallet(uc *UserCard) *UserWalletQuery {
	query := &UserWalletQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usercard.Table, usercard.FieldID, id),
			sqlgraph.To(userwallet.Table, userwallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercard.WalletTable, usercard.WalletColumn),
		)
		fromV = sqlgraph.Neighbors(uc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserCardClient) Hooks() []Hook {
	return c.hooks.UserCard
}

// UserWalletClient is a client for the UserWallet schema.
type UserWalletClient struct {
	config
}

// NewUserWalletClient returns a client for the UserWallet from the given config.
func NewUserWalletClient(c config) *UserWalletClient {
	return &UserWalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userwallet.Hooks(f(g(h())))`.
func (c *UserWalletClient) Use(hooks ...Hook) {
	c.hooks.UserWallet = append(c.hooks.UserWallet, hooks...)
}

// Create returns a create builder for UserWallet.
func (c *UserWalletClient) Create() *UserWalletCreate {
	mutation := newUserWalletMutation(c.config, OpCreate)
	return &UserWalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserWallet entities.
func (c *UserWalletClient) CreateBulk(builders ...*UserWalletCreate) *UserWalletCreateBulk {
	return &UserWalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserWallet.
func (c *UserWalletClient) Update() *UserWalletUpdate {
	mutation := newUserWalletMutation(c.config, OpUpdate)
	return &UserWalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserWalletClient) UpdateOne(uw *UserWallet) *UserWalletUpdateOne {
	mutation := newUserWalletMutation(c.config, OpUpdateOne, withUserWallet(uw))
	return &UserWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserWalletClient) UpdateOneID(id int64) *UserWalletUpdateOne {
	mutation := newUserWalletMutation(c.config, OpUpdateOne, withUserWalletID(id))
	return &UserWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserWallet.
func (c *UserWalletClient) Delete() *UserWalletDelete {
	mutation := newUserWalletMutation(c.config, OpDelete)
	return &UserWalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserWalletClient) DeleteOne(uw *UserWallet) *UserWalletDeleteOne {
	return c.DeleteOneID(uw.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserWalletClient) DeleteOneID(id int64) *UserWalletDeleteOne {
	builder := c.Delete().Where(userwallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserWalletDeleteOne{builder}
}

// Query returns a query builder for UserWallet.
func (c *UserWalletClient) Query() *UserWalletQuery {
	return &UserWalletQuery{
		config: c.config,
	}
}

// Get returns a UserWallet entity by its id.
func (c *UserWalletClient) Get(ctx context.Context, id int64) (*UserWallet, error) {
	return c.Query().Where(userwallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserWalletClient) GetX(ctx context.Context, id int64) *UserWallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserWallet.
func (c *UserWalletClient) QueryUser(uw *UserWallet) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uw.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userwallet.Table, userwallet.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userwallet.UserTable, userwallet.UserColumn),
		)
		fromV = sqlgraph.Neighbors(uw.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserWalletCards queries the user_wallet_cards edge of a UserWallet.
func (c *UserWalletClient) QueryUserWalletCards(uw *UserWallet) *UserCardQuery {
	query := &UserCardQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uw.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userwallet.Table, userwallet.FieldID, id),
			sqlgraph.To(usercard.Table, usercard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userwallet.UserWalletCardsTable, userwallet.UserWalletCardsColumn),
		)
		fromV = sqlgraph.Neighbors(uw.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserWalletClient) Hooks() []Hook {
	return c.hooks.UserWallet
}
