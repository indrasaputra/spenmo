// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/card_getter.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/indrasaputra/spenmo/entity"
)

// MockGetCard is a mock of GetCard interface.
type MockGetCard struct {
	ctrl     *gomock.Controller
	recorder *MockGetCardMockRecorder
}

// MockGetCardMockRecorder is the mock recorder for MockGetCard.
type MockGetCardMockRecorder struct {
	mock *MockGetCard
}

// NewMockGetCard creates a new mock instance.
func NewMockGetCard(ctrl *gomock.Controller) *MockGetCard {
	mock := &MockGetCard{ctrl: ctrl}
	mock.recorder = &MockGetCardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetCard) EXPECT() *MockGetCardMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockGetCard) GetAll(ctx context.Context, userID int64) ([]*entity.UserCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID)
	ret0, _ := ret[0].([]*entity.UserCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGetCardMockRecorder) GetAll(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGetCard)(nil).GetAll), ctx, userID)
}

// GetByID mocks base method.
func (m *MockGetCard) GetByID(ctx context.Context, userID, cardID int64) (*entity.UserCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, userID, cardID)
	ret0, _ := ret[0].(*entity.UserCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockGetCardMockRecorder) GetByID(ctx, userID, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGetCard)(nil).GetByID), ctx, userID, cardID)
}

// MockGetCardRepository is a mock of GetCardRepository interface.
type MockGetCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetCardRepositoryMockRecorder
}

// MockGetCardRepositoryMockRecorder is the mock recorder for MockGetCardRepository.
type MockGetCardRepositoryMockRecorder struct {
	mock *MockGetCardRepository
}

// NewMockGetCardRepository creates a new mock instance.
func NewMockGetCardRepository(ctrl *gomock.Controller) *MockGetCardRepository {
	mock := &MockGetCardRepository{ctrl: ctrl}
	mock.recorder = &MockGetCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetCardRepository) EXPECT() *MockGetCardRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockGetCardRepository) GetAll(ctx context.Context, userID int64) ([]*entity.UserCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID)
	ret0, _ := ret[0].([]*entity.UserCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGetCardRepositoryMockRecorder) GetAll(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGetCardRepository)(nil).GetAll), ctx, userID)
}

// GetByID mocks base method.
func (m *MockGetCardRepository) GetByID(ctx context.Context, userID, cardID int64) (*entity.UserCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, userID, cardID)
	ret0, _ := ret[0].(*entity.UserCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockGetCardRepositoryMockRecorder) GetByID(ctx, userID, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGetCardRepository)(nil).GetByID), ctx, userID, cardID)
}
