// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/card_deleter.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDeleteCard is a mock of DeleteCard interface.
type MockDeleteCard struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteCardMockRecorder
}

// MockDeleteCardMockRecorder is the mock recorder for MockDeleteCard.
type MockDeleteCardMockRecorder struct {
	mock *MockDeleteCard
}

// NewMockDeleteCard creates a new mock instance.
func NewMockDeleteCard(ctrl *gomock.Controller) *MockDeleteCard {
	mock := &MockDeleteCard{ctrl: ctrl}
	mock.recorder = &MockDeleteCardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteCard) EXPECT() *MockDeleteCardMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeleteCard) Delete(ctx context.Context, userID, cardID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, cardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeleteCardMockRecorder) Delete(ctx, userID, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeleteCard)(nil).Delete), ctx, userID, cardID)
}

// MockDeleteCardRepository is a mock of DeleteCardRepository interface.
type MockDeleteCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteCardRepositoryMockRecorder
}

// MockDeleteCardRepositoryMockRecorder is the mock recorder for MockDeleteCardRepository.
type MockDeleteCardRepositoryMockRecorder struct {
	mock *MockDeleteCardRepository
}

// NewMockDeleteCardRepository creates a new mock instance.
func NewMockDeleteCardRepository(ctrl *gomock.Controller) *MockDeleteCardRepository {
	mock := &MockDeleteCardRepository{ctrl: ctrl}
	mock.recorder = &MockDeleteCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteCardRepository) EXPECT() *MockDeleteCardRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeleteCardRepository) Delete(ctx context.Context, userID, cardID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, cardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeleteCardRepositoryMockRecorder) Delete(ctx, userID, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeleteCardRepository)(nil).Delete), ctx, userID, cardID)
}
