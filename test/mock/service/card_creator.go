// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/card_creator.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/indrasaputra/spenmo/entity"
)

// MockCreateCard is a mock of CreateCard interface.
type MockCreateCard struct {
	ctrl     *gomock.Controller
	recorder *MockCreateCardMockRecorder
}

// MockCreateCardMockRecorder is the mock recorder for MockCreateCard.
type MockCreateCardMockRecorder struct {
	mock *MockCreateCard
}

// NewMockCreateCard creates a new mock instance.
func NewMockCreateCard(ctrl *gomock.Controller) *MockCreateCard {
	mock := &MockCreateCard{ctrl: ctrl}
	mock.recorder = &MockCreateCardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateCard) EXPECT() *MockCreateCardMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreateCard) Create(ctx context.Context, card *entity.UserCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCreateCardMockRecorder) Create(ctx, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreateCard)(nil).Create), ctx, card)
}

// MockCreateCardRepository is a mock of CreateCardRepository interface.
type MockCreateCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreateCardRepositoryMockRecorder
}

// MockCreateCardRepositoryMockRecorder is the mock recorder for MockCreateCardRepository.
type MockCreateCardRepositoryMockRecorder struct {
	mock *MockCreateCardRepository
}

// NewMockCreateCardRepository creates a new mock instance.
func NewMockCreateCardRepository(ctrl *gomock.Controller) *MockCreateCardRepository {
	mock := &MockCreateCardRepository{ctrl: ctrl}
	mock.recorder = &MockCreateCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateCardRepository) EXPECT() *MockCreateCardRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockCreateCardRepository) Insert(ctx context.Context, card *entity.UserCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockCreateCardRepositoryMockRecorder) Insert(ctx, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCreateCardRepository)(nil).Insert), ctx, card)
}
