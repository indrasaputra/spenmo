// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/card_updater.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/indrasaputra/spenmo/entity"
)

// MockUpdateCard is a mock of UpdateCard interface.
type MockUpdateCard struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateCardMockRecorder
}

// MockUpdateCardMockRecorder is the mock recorder for MockUpdateCard.
type MockUpdateCardMockRecorder struct {
	mock *MockUpdateCard
}

// NewMockUpdateCard creates a new mock instance.
func NewMockUpdateCard(ctrl *gomock.Controller) *MockUpdateCard {
	mock := &MockUpdateCard{ctrl: ctrl}
	mock.recorder = &MockUpdateCardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateCard) EXPECT() *MockUpdateCardMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockUpdateCard) Update(ctx context.Context, card *entity.UserCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUpdateCardMockRecorder) Update(ctx, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdateCard)(nil).Update), ctx, card)
}

// MockUpdateCardRepository is a mock of UpdateCardRepository interface.
type MockUpdateCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateCardRepositoryMockRecorder
}

// MockUpdateCardRepositoryMockRecorder is the mock recorder for MockUpdateCardRepository.
type MockUpdateCardRepositoryMockRecorder struct {
	mock *MockUpdateCardRepository
}

// NewMockUpdateCardRepository creates a new mock instance.
func NewMockUpdateCardRepository(ctrl *gomock.Controller) *MockUpdateCardRepository {
	mock := &MockUpdateCardRepository{ctrl: ctrl}
	mock.recorder = &MockUpdateCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateCardRepository) EXPECT() *MockUpdateCardRepositoryMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockUpdateCardRepository) Update(ctx context.Context, card *entity.UserCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUpdateCardRepositoryMockRecorder) Update(ctx, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdateCardRepository)(nil).Update), ctx, card)
}
