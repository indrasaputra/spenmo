// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: proto/indrasaputra/spenmo/v1/spenmo.proto

package spenmov1

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpenmoCardErrorCode int32

const (
	// Default enum code according to
	// https://medium.com/@akhaku/protobuf-definition-best-practices-87f281576f31.
	SpenmoCardErrorCode_UNSPECIFIED SpenmoCardErrorCode = 0
	// Unexpected behavior occured in system.
	SpenmoCardErrorCode_INTERNAL SpenmoCardErrorCode = 1
	// Card instance is empty or nil.
	SpenmoCardErrorCode_EMPTY_CARD SpenmoCardErrorCode = 2
	// Card's id is invalid.
	SpenmoCardErrorCode_INVALID_ID SpenmoCardErrorCode = 3
	// Card not found in system.
	SpenmoCardErrorCode_NOT_FOUND SpenmoCardErrorCode = 4
	// Card's user is invalid.
	SpenmoCardErrorCode_INVALID_USER SpenmoCardErrorCode = 5
	// Card's wallet is invalid.
	SpenmoCardErrorCode_INVALID_WALLET SpenmoCardErrorCode = 6
	// Card's limit is invalid.
	SpenmoCardErrorCode_INVALID_LIMIT SpenmoCardErrorCode = 7
)

// Enum value maps for SpenmoCardErrorCode.
var (
	SpenmoCardErrorCode_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "INTERNAL",
		2: "EMPTY_CARD",
		3: "INVALID_ID",
		4: "NOT_FOUND",
		5: "INVALID_USER",
		6: "INVALID_WALLET",
		7: "INVALID_LIMIT",
	}
	SpenmoCardErrorCode_value = map[string]int32{
		"UNSPECIFIED":    0,
		"INTERNAL":       1,
		"EMPTY_CARD":     2,
		"INVALID_ID":     3,
		"NOT_FOUND":      4,
		"INVALID_USER":   5,
		"INVALID_WALLET": 6,
		"INVALID_LIMIT":  7,
	}
)

func (x SpenmoCardErrorCode) Enum() *SpenmoCardErrorCode {
	p := new(SpenmoCardErrorCode)
	*p = x
	return p
}

func (x SpenmoCardErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpenmoCardErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_enumTypes[0].Descriptor()
}

func (SpenmoCardErrorCode) Type() protoreflect.EnumType {
	return &file_proto_indrasaputra_spenmo_v1_spenmo_proto_enumTypes[0]
}

func (x SpenmoCardErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpenmoCardErrorCode.Descriptor instead.
func (SpenmoCardErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP(), []int{0}
}

type CreateCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card *Card `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *CreateCardRequest) Reset() {
	*x = CreateCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCardRequest) ProtoMessage() {}

func (x *CreateCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCardRequest.ProtoReflect.Descriptor instead.
func (*CreateCardRequest) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCardRequest) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type CreateCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateCardResponse) Reset() {
	*x = CreateCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCardResponse) ProtoMessage() {}

func (x *CreateCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCardResponse.ProtoReflect.Descriptor instead.
func (*CreateCardResponse) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP(), []int{1}
}

type UpdateCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Card *Card  `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *UpdateCardRequest) Reset() {
	*x = UpdateCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCardRequest) ProtoMessage() {}

func (x *UpdateCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCardRequest.ProtoReflect.Descriptor instead.
func (*UpdateCardRequest) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateCardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCardRequest) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type UpdateCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCardResponse) Reset() {
	*x = UpdateCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCardResponse) ProtoMessage() {}

func (x *UpdateCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCardResponse.ProtoReflect.Descriptor instead.
func (*UpdateCardResponse) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP(), []int{3}
}

type DeleteCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCardRequest) Reset() {
	*x = DeleteCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCardRequest) ProtoMessage() {}

func (x *DeleteCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCardRequest.ProtoReflect.Descriptor instead.
func (*DeleteCardRequest) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteCardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCardResponse) Reset() {
	*x = DeleteCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCardResponse) ProtoMessage() {}

func (x *DeleteCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCardResponse.ProtoReflect.Descriptor instead.
func (*DeleteCardResponse) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP(), []int{5}
}

type GetCardByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCardByIDRequest) Reset() {
	*x = GetCardByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardByIDRequest) ProtoMessage() {}

func (x *GetCardByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardByIDRequest.ProtoReflect.Descriptor instead.
func (*GetCardByIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP(), []int{6}
}

func (x *GetCardByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCardByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card *Card `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *GetCardByIDResponse) Reset() {
	*x = GetCardByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardByIDResponse) ProtoMessage() {}

func (x *GetCardByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardByIDResponse.ProtoReflect.Descriptor instead.
func (*GetCardByIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP(), []int{7}
}

func (x *GetCardByIDResponse) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type GetAllCardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllCardsRequest) Reset() {
	*x = GetAllCardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCardsRequest) ProtoMessage() {}

func (x *GetAllCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCardsRequest.ProtoReflect.Descriptor instead.
func (*GetAllCardsRequest) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP(), []int{8}
}

type GetAllCardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*Card `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *GetAllCardsResponse) Reset() {
	*x = GetAllCardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCardsResponse) ProtoMessage() {}

func (x *GetAllCardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCardsResponse.ProtoReflect.Descriptor instead.
func (*GetAllCardsResponse) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP(), []int{9}
}

func (x *GetAllCardsResponse) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId       string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WalletId     string                 `protobuf:"bytes,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	LimitDaily   float64                `protobuf:"fixed64,4,opt,name=limit_daily,json=limitDaily,proto3" json:"limit_daily,omitempty"`
	LimitMonthly float64                `protobuf:"fixed64,5,opt,name=limit_monthly,json=limitMonthly,proto3" json:"limit_monthly,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP(), []int{10}
}

func (x *Card) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Card) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Card) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *Card) GetLimitDaily() float64 {
	if x != nil {
		return x.LimitDaily
	}
	return 0
}

func (x *Card) GetLimitMonthly() float64 {
	if x != nil {
		return x.LimitMonthly
	}
	return 0
}

func (x *Card) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Card) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Card) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type SpenmoCardError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode SpenmoCardErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=proto.indrasaputra.spenmo.v1.SpenmoCardErrorCode" json:"error_code,omitempty"`
}

func (x *SpenmoCardError) Reset() {
	*x = SpenmoCardError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpenmoCardError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpenmoCardError) ProtoMessage() {}

func (x *SpenmoCardError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpenmoCardError.ProtoReflect.Descriptor instead.
func (*SpenmoCardError) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP(), []int{11}
}

func (x *SpenmoCardError) GetErrorCode() SpenmoCardErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return SpenmoCardErrorCode_UNSPECIFIED
}

var File_proto_indrasaputra_spenmo_v1_spenmo_proto protoreflect.FileDescriptor

var file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70,
	0x75, 0x74, 0x72, 0x61, 0x2f, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e,
	0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72,
	0x61, 0x2e, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0x92, 0x41, 0x2b, 0x32, 0x1b, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x63, 0x61, 0x72, 0x64,
	0x4a, 0x0c, 0x22, 0x6b, 0x6d, 0x7a, 0x77, 0x61, 0x38, 0x61, 0x77, 0x61, 0x61, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61,
	0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x53, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x1b, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x63,
	0x61, 0x72, 0x64, 0x4a, 0x0c, 0x22, 0x6b, 0x6d, 0x7a, 0x77, 0x61, 0x38, 0x61, 0x77, 0x61, 0x61,
	0x22, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92,
	0x41, 0x2b, 0x32, 0x1b, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x63, 0x61, 0x72, 0x64, 0x4a,
	0x0c, 0x22, 0x6b, 0x6d, 0x7a, 0x77, 0x61, 0x38, 0x61, 0x77, 0x61, 0x61, 0x22, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x4d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69,
	0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x70, 0x65, 0x6e,
	0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72,
	0x61, 0x2e, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x99, 0x05, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x4b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41,
	0x34, 0x32, 0x1b, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x63, 0x61, 0x72, 0x64, 0x4a, 0x0c,
	0x22, 0x6b, 0x6d, 0x7a, 0x77, 0x61, 0x38, 0x61, 0x77, 0x61, 0x61, 0x22, 0xa2, 0x02, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34,
	0x92, 0x41, 0x2d, 0x32, 0x16, 0x55, 0x73, 0x65, 0x72, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x6f, 0x77,
	0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x72, 0x64, 0x4a, 0x0a, 0x22, 0x61, 0x62,
	0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x22, 0xa2, 0x02, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x83, 0x01, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x66, 0x92, 0x41, 0x5f, 0x32, 0x4a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x20, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x72, 0x64, 0x20, 0x62, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6f,
	0x6e, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x4a, 0x08, 0x22, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x22, 0xa2, 0x02, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0xe2, 0x41, 0x01, 0x05, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x20, 0x41, 0x20,
	0x68, 0x61, 0x72, 0x64, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x20, 0x63, 0x61, 0x72, 0x64, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4a, 0x0a,
	0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x58, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x33, 0x92,
	0x41, 0x30, 0x32, 0x22, 0x41, 0x20, 0x68, 0x61, 0x72, 0x64, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x20, 0x63, 0x61, 0x72, 0x64,
	0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4a, 0x0a, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e,
	0x30, 0x30, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x63, 0x0a, 0x0f, 0x53, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x43, 0x61, 0x72,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e,
	0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x6d, 0x6f,
	0x43, 0x61, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0x9c, 0x01, 0x0a, 0x13, 0x53, 0x70, 0x65,
	0x6e, 0x6d, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x07, 0x32, 0xab, 0x04, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8e,
	0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74,
	0x72, 0x61, 0x2e, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75,
	0x74, 0x72, 0x61, 0x2e, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12,
	0x93, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75,
	0x74, 0x72, 0x61, 0x2e, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70,
	0x75, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64,
	0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e,
	0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x70, 0x65, 0x6e, 0x6d,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a,
	0x14, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x5e, 0x92, 0x41, 0x5b, 0x12, 0x59, 0x54, 0x68, 0x69, 0x73,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x73, 0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20,
	0x6f, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e,
	0x67, 0x20, 0x75, 0x73, 0x65, 0x20, 0x63, 0x61, 0x73, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x77,
	0x6f, 0x72, 0x6b, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20,
	0x63, 0x61, 0x72, 0x64, 0x2e, 0x32, 0x92, 0x03, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e,
	0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72,
	0x61, 0x2e, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74,
	0x72, 0x61, 0x2e, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70,
	0x75, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x5d, 0x92, 0x41, 0x5a,
	0x12, 0x58, 0x54, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x20, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x20, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x27, 0x73, 0x20, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x94, 0x02, 0x5a, 0x44, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73,
	0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2f, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61,
	0x2f, 0x73, 0x70, 0x65, 0x6e, 0x6d, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x70, 0x65, 0x6e, 0x6d,
	0x6f, 0x76, 0x31, 0x92, 0x41, 0xca, 0x01, 0x12, 0xa3, 0x01, 0x0a, 0x16, 0x53, 0x70, 0x65, 0x6e,
	0x6d, 0x6f, 0x20, 0x55, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x43, 0x61, 0x72, 0x64, 0x20, 0x41,
	0x50, 0x49, 0x22, 0x30, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x72, 0x61, 0x20, 0x53, 0x61, 0x70, 0x75,
	0x74, 0x72, 0x61, 0x12, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70,
	0x75, 0x74, 0x72, 0x61, 0x2a, 0x50, 0x0a, 0x14, 0x42, 0x53, 0x44, 0x20, 0x33, 0x2d, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2f, 0x73, 0x70,
	0x65, 0x6e, 0x6d, 0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c,
	0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x32, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescOnce sync.Once
	file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescData = file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDesc
)

func file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescGZIP() []byte {
	file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescOnce.Do(func() {
		file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescData)
	})
	return file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDescData
}

var file_proto_indrasaputra_spenmo_v1_spenmo_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_indrasaputra_spenmo_v1_spenmo_proto_goTypes = []interface{}{
	(SpenmoCardErrorCode)(0),      // 0: proto.indrasaputra.spenmo.v1.SpenmoCardErrorCode
	(*CreateCardRequest)(nil),     // 1: proto.indrasaputra.spenmo.v1.CreateCardRequest
	(*CreateCardResponse)(nil),    // 2: proto.indrasaputra.spenmo.v1.CreateCardResponse
	(*UpdateCardRequest)(nil),     // 3: proto.indrasaputra.spenmo.v1.UpdateCardRequest
	(*UpdateCardResponse)(nil),    // 4: proto.indrasaputra.spenmo.v1.UpdateCardResponse
	(*DeleteCardRequest)(nil),     // 5: proto.indrasaputra.spenmo.v1.DeleteCardRequest
	(*DeleteCardResponse)(nil),    // 6: proto.indrasaputra.spenmo.v1.DeleteCardResponse
	(*GetCardByIDRequest)(nil),    // 7: proto.indrasaputra.spenmo.v1.GetCardByIDRequest
	(*GetCardByIDResponse)(nil),   // 8: proto.indrasaputra.spenmo.v1.GetCardByIDResponse
	(*GetAllCardsRequest)(nil),    // 9: proto.indrasaputra.spenmo.v1.GetAllCardsRequest
	(*GetAllCardsResponse)(nil),   // 10: proto.indrasaputra.spenmo.v1.GetAllCardsResponse
	(*Card)(nil),                  // 11: proto.indrasaputra.spenmo.v1.Card
	(*SpenmoCardError)(nil),       // 12: proto.indrasaputra.spenmo.v1.SpenmoCardError
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
}
var file_proto_indrasaputra_spenmo_v1_spenmo_proto_depIdxs = []int32{
	11, // 0: proto.indrasaputra.spenmo.v1.CreateCardRequest.card:type_name -> proto.indrasaputra.spenmo.v1.Card
	11, // 1: proto.indrasaputra.spenmo.v1.UpdateCardRequest.card:type_name -> proto.indrasaputra.spenmo.v1.Card
	11, // 2: proto.indrasaputra.spenmo.v1.GetCardByIDResponse.card:type_name -> proto.indrasaputra.spenmo.v1.Card
	11, // 3: proto.indrasaputra.spenmo.v1.GetAllCardsResponse.cards:type_name -> proto.indrasaputra.spenmo.v1.Card
	13, // 4: proto.indrasaputra.spenmo.v1.Card.created_at:type_name -> google.protobuf.Timestamp
	13, // 5: proto.indrasaputra.spenmo.v1.Card.updated_at:type_name -> google.protobuf.Timestamp
	13, // 6: proto.indrasaputra.spenmo.v1.Card.deleted_at:type_name -> google.protobuf.Timestamp
	0,  // 7: proto.indrasaputra.spenmo.v1.SpenmoCardError.error_code:type_name -> proto.indrasaputra.spenmo.v1.SpenmoCardErrorCode
	1,  // 8: proto.indrasaputra.spenmo.v1.CardCommandService.CreateCard:input_type -> proto.indrasaputra.spenmo.v1.CreateCardRequest
	3,  // 9: proto.indrasaputra.spenmo.v1.CardCommandService.UpdateCard:input_type -> proto.indrasaputra.spenmo.v1.UpdateCardRequest
	5,  // 10: proto.indrasaputra.spenmo.v1.CardCommandService.DeleteCard:input_type -> proto.indrasaputra.spenmo.v1.DeleteCardRequest
	7,  // 11: proto.indrasaputra.spenmo.v1.CardQueryService.GetCardByID:input_type -> proto.indrasaputra.spenmo.v1.GetCardByIDRequest
	9,  // 12: proto.indrasaputra.spenmo.v1.CardQueryService.GetAllCards:input_type -> proto.indrasaputra.spenmo.v1.GetAllCardsRequest
	2,  // 13: proto.indrasaputra.spenmo.v1.CardCommandService.CreateCard:output_type -> proto.indrasaputra.spenmo.v1.CreateCardResponse
	4,  // 14: proto.indrasaputra.spenmo.v1.CardCommandService.UpdateCard:output_type -> proto.indrasaputra.spenmo.v1.UpdateCardResponse
	6,  // 15: proto.indrasaputra.spenmo.v1.CardCommandService.DeleteCard:output_type -> proto.indrasaputra.spenmo.v1.DeleteCardResponse
	8,  // 16: proto.indrasaputra.spenmo.v1.CardQueryService.GetCardByID:output_type -> proto.indrasaputra.spenmo.v1.GetCardByIDResponse
	10, // 17: proto.indrasaputra.spenmo.v1.CardQueryService.GetAllCards:output_type -> proto.indrasaputra.spenmo.v1.GetAllCardsResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_indrasaputra_spenmo_v1_spenmo_proto_init() }
func file_proto_indrasaputra_spenmo_v1_spenmo_proto_init() {
	if File_proto_indrasaputra_spenmo_v1_spenmo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCardByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCardByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpenmoCardError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_indrasaputra_spenmo_v1_spenmo_proto_goTypes,
		DependencyIndexes: file_proto_indrasaputra_spenmo_v1_spenmo_proto_depIdxs,
		EnumInfos:         file_proto_indrasaputra_spenmo_v1_spenmo_proto_enumTypes,
		MessageInfos:      file_proto_indrasaputra_spenmo_v1_spenmo_proto_msgTypes,
	}.Build()
	File_proto_indrasaputra_spenmo_v1_spenmo_proto = out.File
	file_proto_indrasaputra_spenmo_v1_spenmo_proto_rawDesc = nil
	file_proto_indrasaputra_spenmo_v1_spenmo_proto_goTypes = nil
	file_proto_indrasaputra_spenmo_v1_spenmo_proto_depIdxs = nil
}
